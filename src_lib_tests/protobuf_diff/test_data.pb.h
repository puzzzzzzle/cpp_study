// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fdata_2eproto;
namespace test_data {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class MessageInMessage;
class MessageInMessageDefaultTypeInternal;
extern MessageInMessageDefaultTypeInternal _MessageInMessage_default_instance_;
class OneOfMessage;
class OneOfMessageDefaultTypeInternal;
extern OneOfMessageDefaultTypeInternal _OneOfMessage_default_instance_;
class Values;
class ValuesDefaultTypeInternal;
extern ValuesDefaultTypeInternal _Values_default_instance_;
class WithList;
class WithListDefaultTypeInternal;
extern WithListDefaultTypeInternal _WithList_default_instance_;
class WithList_M3Entry_DoNotUse;
class WithList_M3Entry_DoNotUseDefaultTypeInternal;
extern WithList_M3Entry_DoNotUseDefaultTypeInternal _WithList_M3Entry_DoNotUse_default_instance_;
}  // namespace test_data
PROTOBUF_NAMESPACE_OPEN
template<> ::test_data::Empty* Arena::CreateMaybeMessage<::test_data::Empty>(Arena*);
template<> ::test_data::MessageInMessage* Arena::CreateMaybeMessage<::test_data::MessageInMessage>(Arena*);
template<> ::test_data::OneOfMessage* Arena::CreateMaybeMessage<::test_data::OneOfMessage>(Arena*);
template<> ::test_data::Values* Arena::CreateMaybeMessage<::test_data::Values>(Arena*);
template<> ::test_data::WithList* Arena::CreateMaybeMessage<::test_data::WithList>(Arena*);
template<> ::test_data::WithList_M3Entry_DoNotUse* Arena::CreateMaybeMessage<::test_data::WithList_M3Entry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test_data {

// ===================================================================

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_data.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {};
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_data.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fdata_2eproto);
    return ::descriptor_table_test_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:test_data.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fdata_2eproto;
};
// -------------------------------------------------------------------

class Values PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_data.Values) */ {
 public:
  inline Values() : Values(nullptr) {};
  virtual ~Values();

  Values(const Values& from);
  Values(Values&& from) noexcept
    : Values() {
    *this = ::std::move(from);
  }

  inline Values& operator=(const Values& from) {
    CopyFrom(from);
    return *this;
  }
  inline Values& operator=(Values&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Values& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Values* internal_default_instance() {
    return reinterpret_cast<const Values*>(
               &_Values_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Values& a, Values& b) {
    a.Swap(&b);
  }
  inline void Swap(Values* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Values* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Values* New() const final {
    return CreateMaybeMessage<Values>(nullptr);
  }

  Values* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Values>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Values& from);
  void MergeFrom(const Values& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Values* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_data.Values";
  }
  protected:
  explicit Values(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fdata_2eproto);
    return ::descriptor_table_test_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStr4FieldNumber = 4,
    kI2FieldNumber = 2,
    kF3FieldNumber = 3,
    kI1FieldNumber = 1,
  };
  // string str4 = 4;
  void clear_str4();
  const std::string& str4() const;
  void set_str4(const std::string& value);
  void set_str4(std::string&& value);
  void set_str4(const char* value);
  void set_str4(const char* value, size_t size);
  std::string* mutable_str4();
  std::string* release_str4();
  void set_allocated_str4(std::string* str4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_str4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_str4(
      std::string* str4);
  private:
  const std::string& _internal_str4() const;
  void _internal_set_str4(const std::string& value);
  std::string* _internal_mutable_str4();
  public:

  // uint64 i2 = 2;
  void clear_i2();
  ::PROTOBUF_NAMESPACE_ID::uint64 i2() const;
  void set_i2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_i2() const;
  void _internal_set_i2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double f3 = 3;
  void clear_f3();
  double f3() const;
  void set_f3(double value);
  private:
  double _internal_f3() const;
  void _internal_set_f3(double value);
  public:

  // int32 i1 = 1;
  void clear_i1();
  ::PROTOBUF_NAMESPACE_ID::int32 i1() const;
  void set_i1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i1() const;
  void _internal_set_i1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:test_data.Values)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str4_;
  ::PROTOBUF_NAMESPACE_ID::uint64 i2_;
  double f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 i1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MessageInMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_data.MessageInMessage) */ {
 public:
  inline MessageInMessage() : MessageInMessage(nullptr) {};
  virtual ~MessageInMessage();

  MessageInMessage(const MessageInMessage& from);
  MessageInMessage(MessageInMessage&& from) noexcept
    : MessageInMessage() {
    *this = ::std::move(from);
  }

  inline MessageInMessage& operator=(const MessageInMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInMessage& operator=(MessageInMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageInMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageInMessage* internal_default_instance() {
    return reinterpret_cast<const MessageInMessage*>(
               &_MessageInMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageInMessage& a, MessageInMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageInMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageInMessage* New() const final {
    return CreateMaybeMessage<MessageInMessage>(nullptr);
  }

  MessageInMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageInMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageInMessage& from);
  void MergeFrom(const MessageInMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_data.MessageInMessage";
  }
  protected:
  explicit MessageInMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fdata_2eproto);
    return ::descriptor_table_test_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV1FieldNumber = 1,
    kV2FieldNumber = 2,
    kV3FieldNumber = 3,
  };
  // .test_data.Values v1 = 1;
  bool has_v1() const;
  private:
  bool _internal_has_v1() const;
  public:
  void clear_v1();
  const ::test_data::Values& v1() const;
  ::test_data::Values* release_v1();
  ::test_data::Values* mutable_v1();
  void set_allocated_v1(::test_data::Values* v1);
  private:
  const ::test_data::Values& _internal_v1() const;
  ::test_data::Values* _internal_mutable_v1();
  public:
  void unsafe_arena_set_allocated_v1(
      ::test_data::Values* v1);
  ::test_data::Values* unsafe_arena_release_v1();

  // .test_data.Empty v2 = 2;
  bool has_v2() const;
  private:
  bool _internal_has_v2() const;
  public:
  void clear_v2();
  const ::test_data::Empty& v2() const;
  ::test_data::Empty* release_v2();
  ::test_data::Empty* mutable_v2();
  void set_allocated_v2(::test_data::Empty* v2);
  private:
  const ::test_data::Empty& _internal_v2() const;
  ::test_data::Empty* _internal_mutable_v2();
  public:
  void unsafe_arena_set_allocated_v2(
      ::test_data::Empty* v2);
  ::test_data::Empty* unsafe_arena_release_v2();

  // .test_data.Values v3 = 3;
  bool has_v3() const;
  private:
  bool _internal_has_v3() const;
  public:
  void clear_v3();
  const ::test_data::Values& v3() const;
  ::test_data::Values* release_v3();
  ::test_data::Values* mutable_v3();
  void set_allocated_v3(::test_data::Values* v3);
  private:
  const ::test_data::Values& _internal_v3() const;
  ::test_data::Values* _internal_mutable_v3();
  public:
  void unsafe_arena_set_allocated_v3(
      ::test_data::Values* v3);
  ::test_data::Values* unsafe_arena_release_v3();

  // @@protoc_insertion_point(class_scope:test_data.MessageInMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::test_data::Values* v1_;
  ::test_data::Empty* v2_;
  ::test_data::Values* v3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fdata_2eproto;
};
// -------------------------------------------------------------------

class WithList_M3Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WithList_M3Entry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WithList_M3Entry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  WithList_M3Entry_DoNotUse();
  WithList_M3Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WithList_M3Entry_DoNotUse& other);
  static const WithList_M3Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WithList_M3Entry_DoNotUse*>(&_WithList_M3Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fdata_2eproto);
    return ::descriptor_table_test_5fdata_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class WithList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_data.WithList) */ {
 public:
  inline WithList() : WithList(nullptr) {};
  virtual ~WithList();

  WithList(const WithList& from);
  WithList(WithList&& from) noexcept
    : WithList() {
    *this = ::std::move(from);
  }

  inline WithList& operator=(const WithList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithList& operator=(WithList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WithList* internal_default_instance() {
    return reinterpret_cast<const WithList*>(
               &_WithList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WithList& a, WithList& b) {
    a.Swap(&b);
  }
  inline void Swap(WithList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithList* New() const final {
    return CreateMaybeMessage<WithList>(nullptr);
  }

  WithList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithList& from);
  void MergeFrom(const WithList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_data.WithList";
  }
  protected:
  explicit WithList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fdata_2eproto);
    return ::descriptor_table_test_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kL2FieldNumber = 2,
    kM3FieldNumber = 3,
    kStr4FieldNumber = 4,
    kV1FieldNumber = 1,
  };
  // repeated .test_data.Values l2 = 2;
  int l2_size() const;
  private:
  int _internal_l2_size() const;
  public:
  void clear_l2();
  ::test_data::Values* mutable_l2(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_data::Values >*
      mutable_l2();
  private:
  const ::test_data::Values& _internal_l2(int index) const;
  ::test_data::Values* _internal_add_l2();
  public:
  const ::test_data::Values& l2(int index) const;
  ::test_data::Values* add_l2();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_data::Values >&
      l2() const;

  // map<int32, .test_data.Values> m3 = 3;
  int m3_size() const;
  private:
  int _internal_m3_size() const;
  public:
  void clear_m3();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values >&
      _internal_m3() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values >*
      _internal_mutable_m3();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values >&
      m3() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values >*
      mutable_m3();

  // string str4 = 4;
  void clear_str4();
  const std::string& str4() const;
  void set_str4(const std::string& value);
  void set_str4(std::string&& value);
  void set_str4(const char* value);
  void set_str4(const char* value, size_t size);
  std::string* mutable_str4();
  std::string* release_str4();
  void set_allocated_str4(std::string* str4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_str4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_str4(
      std::string* str4);
  private:
  const std::string& _internal_str4() const;
  void _internal_set_str4(const std::string& value);
  std::string* _internal_mutable_str4();
  public:

  // .test_data.Values v1 = 1;
  bool has_v1() const;
  private:
  bool _internal_has_v1() const;
  public:
  void clear_v1();
  const ::test_data::Values& v1() const;
  ::test_data::Values* release_v1();
  ::test_data::Values* mutable_v1();
  void set_allocated_v1(::test_data::Values* v1);
  private:
  const ::test_data::Values& _internal_v1() const;
  ::test_data::Values* _internal_mutable_v1();
  public:
  void unsafe_arena_set_allocated_v1(
      ::test_data::Values* v1);
  ::test_data::Values* unsafe_arena_release_v1();

  // @@protoc_insertion_point(class_scope:test_data.WithList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_data::Values > l2_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WithList_M3Entry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > m3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str4_;
  ::test_data::Values* v1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fdata_2eproto;
};
// -------------------------------------------------------------------

class OneOfMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_data.OneOfMessage) */ {
 public:
  inline OneOfMessage() : OneOfMessage(nullptr) {};
  virtual ~OneOfMessage();

  OneOfMessage(const OneOfMessage& from);
  OneOfMessage(OneOfMessage&& from) noexcept
    : OneOfMessage() {
    *this = ::std::move(from);
  }

  inline OneOfMessage& operator=(const OneOfMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneOfMessage& operator=(OneOfMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneOfMessage& default_instance();

  enum PayloadCase {
    kV2 = 2,
    kV3 = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneOfMessage* internal_default_instance() {
    return reinterpret_cast<const OneOfMessage*>(
               &_OneOfMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OneOfMessage& a, OneOfMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OneOfMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneOfMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneOfMessage* New() const final {
    return CreateMaybeMessage<OneOfMessage>(nullptr);
  }

  OneOfMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneOfMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneOfMessage& from);
  void MergeFrom(const OneOfMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneOfMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_data.OneOfMessage";
  }
  protected:
  explicit OneOfMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_5fdata_2eproto);
    return ::descriptor_table_test_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV1FieldNumber = 1,
    kV2FieldNumber = 2,
    kV3FieldNumber = 3,
  };
  // .test_data.Values v1 = 1;
  bool has_v1() const;
  private:
  bool _internal_has_v1() const;
  public:
  void clear_v1();
  const ::test_data::Values& v1() const;
  ::test_data::Values* release_v1();
  ::test_data::Values* mutable_v1();
  void set_allocated_v1(::test_data::Values* v1);
  private:
  const ::test_data::Values& _internal_v1() const;
  ::test_data::Values* _internal_mutable_v1();
  public:
  void unsafe_arena_set_allocated_v1(
      ::test_data::Values* v1);
  ::test_data::Values* unsafe_arena_release_v1();

  // .test_data.Values v2 = 2;
  bool has_v2() const;
  private:
  bool _internal_has_v2() const;
  public:
  void clear_v2();
  const ::test_data::Values& v2() const;
  ::test_data::Values* release_v2();
  ::test_data::Values* mutable_v2();
  void set_allocated_v2(::test_data::Values* v2);
  private:
  const ::test_data::Values& _internal_v2() const;
  ::test_data::Values* _internal_mutable_v2();
  public:
  void unsafe_arena_set_allocated_v2(
      ::test_data::Values* v2);
  ::test_data::Values* unsafe_arena_release_v2();

  // .test_data.WithList v3 = 3;
  bool has_v3() const;
  private:
  bool _internal_has_v3() const;
  public:
  void clear_v3();
  const ::test_data::WithList& v3() const;
  ::test_data::WithList* release_v3();
  ::test_data::WithList* mutable_v3();
  void set_allocated_v3(::test_data::WithList* v3);
  private:
  const ::test_data::WithList& _internal_v3() const;
  ::test_data::WithList* _internal_mutable_v3();
  public:
  void unsafe_arena_set_allocated_v3(
      ::test_data::WithList* v3);
  ::test_data::WithList* unsafe_arena_release_v3();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:test_data.OneOfMessage)
 private:
  class _Internal;
  void set_has_v2();
  void set_has_v3();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::test_data::Values* v1_;
  union PayloadUnion {
    PayloadUnion() {}
    ::test_data::Values* v2_;
    ::test_data::WithList* v3_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_test_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Values

// int32 i1 = 1;
inline void Values::clear_i1() {
  i1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Values::_internal_i1() const {
  return i1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Values::i1() const {
  // @@protoc_insertion_point(field_get:test_data.Values.i1)
  return _internal_i1();
}
inline void Values::_internal_set_i1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  i1_ = value;
}
inline void Values::set_i1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i1(value);
  // @@protoc_insertion_point(field_set:test_data.Values.i1)
}

// uint64 i2 = 2;
inline void Values::clear_i2() {
  i2_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Values::_internal_i2() const {
  return i2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Values::i2() const {
  // @@protoc_insertion_point(field_get:test_data.Values.i2)
  return _internal_i2();
}
inline void Values::_internal_set_i2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  i2_ = value;
}
inline void Values::set_i2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_i2(value);
  // @@protoc_insertion_point(field_set:test_data.Values.i2)
}

// double f3 = 3;
inline void Values::clear_f3() {
  f3_ = 0;
}
inline double Values::_internal_f3() const {
  return f3_;
}
inline double Values::f3() const {
  // @@protoc_insertion_point(field_get:test_data.Values.f3)
  return _internal_f3();
}
inline void Values::_internal_set_f3(double value) {
  
  f3_ = value;
}
inline void Values::set_f3(double value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:test_data.Values.f3)
}

// string str4 = 4;
inline void Values::clear_str4() {
  str4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Values::str4() const {
  // @@protoc_insertion_point(field_get:test_data.Values.str4)
  return _internal_str4();
}
inline void Values::set_str4(const std::string& value) {
  _internal_set_str4(value);
  // @@protoc_insertion_point(field_set:test_data.Values.str4)
}
inline std::string* Values::mutable_str4() {
  // @@protoc_insertion_point(field_mutable:test_data.Values.str4)
  return _internal_mutable_str4();
}
inline const std::string& Values::_internal_str4() const {
  return str4_.Get();
}
inline void Values::_internal_set_str4(const std::string& value) {
  
  str4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Values::set_str4(std::string&& value) {
  
  str4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test_data.Values.str4)
}
inline void Values::set_str4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:test_data.Values.str4)
}
inline void Values::set_str4(const char* value,
    size_t size) {
  
  str4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test_data.Values.str4)
}
inline std::string* Values::_internal_mutable_str4() {
  
  return str4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Values::release_str4() {
  // @@protoc_insertion_point(field_release:test_data.Values.str4)
  return str4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Values::set_allocated_str4(std::string* str4) {
  if (str4 != nullptr) {
    
  } else {
    
  }
  str4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test_data.Values.str4)
}
inline std::string* Values::unsafe_arena_release_str4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test_data.Values.str4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return str4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Values::unsafe_arena_set_allocated_str4(
    std::string* str4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (str4 != nullptr) {
    
  } else {
    
  }
  str4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      str4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_data.Values.str4)
}

// -------------------------------------------------------------------

// MessageInMessage

// .test_data.Values v1 = 1;
inline bool MessageInMessage::_internal_has_v1() const {
  return this != internal_default_instance() && v1_ != nullptr;
}
inline bool MessageInMessage::has_v1() const {
  return _internal_has_v1();
}
inline void MessageInMessage::clear_v1() {
  if (GetArena() == nullptr && v1_ != nullptr) {
    delete v1_;
  }
  v1_ = nullptr;
}
inline const ::test_data::Values& MessageInMessage::_internal_v1() const {
  const ::test_data::Values* p = v1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::test_data::Values*>(
      &::test_data::_Values_default_instance_);
}
inline const ::test_data::Values& MessageInMessage::v1() const {
  // @@protoc_insertion_point(field_get:test_data.MessageInMessage.v1)
  return _internal_v1();
}
inline void MessageInMessage::unsafe_arena_set_allocated_v1(
    ::test_data::Values* v1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v1_);
  }
  v1_ = v1;
  if (v1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_data.MessageInMessage.v1)
}
inline ::test_data::Values* MessageInMessage::release_v1() {
  auto temp = unsafe_arena_release_v1();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::test_data::Values* MessageInMessage::unsafe_arena_release_v1() {
  // @@protoc_insertion_point(field_release:test_data.MessageInMessage.v1)
  
  ::test_data::Values* temp = v1_;
  v1_ = nullptr;
  return temp;
}
inline ::test_data::Values* MessageInMessage::_internal_mutable_v1() {
  
  if (v1_ == nullptr) {
    auto* p = CreateMaybeMessage<::test_data::Values>(GetArena());
    v1_ = p;
  }
  return v1_;
}
inline ::test_data::Values* MessageInMessage::mutable_v1() {
  // @@protoc_insertion_point(field_mutable:test_data.MessageInMessage.v1)
  return _internal_mutable_v1();
}
inline void MessageInMessage::set_allocated_v1(::test_data::Values* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete v1_;
  }
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    
  } else {
    
  }
  v1_ = v1;
  // @@protoc_insertion_point(field_set_allocated:test_data.MessageInMessage.v1)
}

// .test_data.Empty v2 = 2;
inline bool MessageInMessage::_internal_has_v2() const {
  return this != internal_default_instance() && v2_ != nullptr;
}
inline bool MessageInMessage::has_v2() const {
  return _internal_has_v2();
}
inline void MessageInMessage::clear_v2() {
  if (GetArena() == nullptr && v2_ != nullptr) {
    delete v2_;
  }
  v2_ = nullptr;
}
inline const ::test_data::Empty& MessageInMessage::_internal_v2() const {
  const ::test_data::Empty* p = v2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::test_data::Empty*>(
      &::test_data::_Empty_default_instance_);
}
inline const ::test_data::Empty& MessageInMessage::v2() const {
  // @@protoc_insertion_point(field_get:test_data.MessageInMessage.v2)
  return _internal_v2();
}
inline void MessageInMessage::unsafe_arena_set_allocated_v2(
    ::test_data::Empty* v2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v2_);
  }
  v2_ = v2;
  if (v2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_data.MessageInMessage.v2)
}
inline ::test_data::Empty* MessageInMessage::release_v2() {
  auto temp = unsafe_arena_release_v2();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::test_data::Empty* MessageInMessage::unsafe_arena_release_v2() {
  // @@protoc_insertion_point(field_release:test_data.MessageInMessage.v2)
  
  ::test_data::Empty* temp = v2_;
  v2_ = nullptr;
  return temp;
}
inline ::test_data::Empty* MessageInMessage::_internal_mutable_v2() {
  
  if (v2_ == nullptr) {
    auto* p = CreateMaybeMessage<::test_data::Empty>(GetArena());
    v2_ = p;
  }
  return v2_;
}
inline ::test_data::Empty* MessageInMessage::mutable_v2() {
  // @@protoc_insertion_point(field_mutable:test_data.MessageInMessage.v2)
  return _internal_mutable_v2();
}
inline void MessageInMessage::set_allocated_v2(::test_data::Empty* v2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete v2_;
  }
  if (v2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(v2);
    if (message_arena != submessage_arena) {
      v2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v2, submessage_arena);
    }
    
  } else {
    
  }
  v2_ = v2;
  // @@protoc_insertion_point(field_set_allocated:test_data.MessageInMessage.v2)
}

// .test_data.Values v3 = 3;
inline bool MessageInMessage::_internal_has_v3() const {
  return this != internal_default_instance() && v3_ != nullptr;
}
inline bool MessageInMessage::has_v3() const {
  return _internal_has_v3();
}
inline void MessageInMessage::clear_v3() {
  if (GetArena() == nullptr && v3_ != nullptr) {
    delete v3_;
  }
  v3_ = nullptr;
}
inline const ::test_data::Values& MessageInMessage::_internal_v3() const {
  const ::test_data::Values* p = v3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::test_data::Values*>(
      &::test_data::_Values_default_instance_);
}
inline const ::test_data::Values& MessageInMessage::v3() const {
  // @@protoc_insertion_point(field_get:test_data.MessageInMessage.v3)
  return _internal_v3();
}
inline void MessageInMessage::unsafe_arena_set_allocated_v3(
    ::test_data::Values* v3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v3_);
  }
  v3_ = v3;
  if (v3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_data.MessageInMessage.v3)
}
inline ::test_data::Values* MessageInMessage::release_v3() {
  auto temp = unsafe_arena_release_v3();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::test_data::Values* MessageInMessage::unsafe_arena_release_v3() {
  // @@protoc_insertion_point(field_release:test_data.MessageInMessage.v3)
  
  ::test_data::Values* temp = v3_;
  v3_ = nullptr;
  return temp;
}
inline ::test_data::Values* MessageInMessage::_internal_mutable_v3() {
  
  if (v3_ == nullptr) {
    auto* p = CreateMaybeMessage<::test_data::Values>(GetArena());
    v3_ = p;
  }
  return v3_;
}
inline ::test_data::Values* MessageInMessage::mutable_v3() {
  // @@protoc_insertion_point(field_mutable:test_data.MessageInMessage.v3)
  return _internal_mutable_v3();
}
inline void MessageInMessage::set_allocated_v3(::test_data::Values* v3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete v3_;
  }
  if (v3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(v3);
    if (message_arena != submessage_arena) {
      v3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v3, submessage_arena);
    }
    
  } else {
    
  }
  v3_ = v3;
  // @@protoc_insertion_point(field_set_allocated:test_data.MessageInMessage.v3)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WithList

// .test_data.Values v1 = 1;
inline bool WithList::_internal_has_v1() const {
  return this != internal_default_instance() && v1_ != nullptr;
}
inline bool WithList::has_v1() const {
  return _internal_has_v1();
}
inline void WithList::clear_v1() {
  if (GetArena() == nullptr && v1_ != nullptr) {
    delete v1_;
  }
  v1_ = nullptr;
}
inline const ::test_data::Values& WithList::_internal_v1() const {
  const ::test_data::Values* p = v1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::test_data::Values*>(
      &::test_data::_Values_default_instance_);
}
inline const ::test_data::Values& WithList::v1() const {
  // @@protoc_insertion_point(field_get:test_data.WithList.v1)
  return _internal_v1();
}
inline void WithList::unsafe_arena_set_allocated_v1(
    ::test_data::Values* v1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v1_);
  }
  v1_ = v1;
  if (v1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_data.WithList.v1)
}
inline ::test_data::Values* WithList::release_v1() {
  auto temp = unsafe_arena_release_v1();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::test_data::Values* WithList::unsafe_arena_release_v1() {
  // @@protoc_insertion_point(field_release:test_data.WithList.v1)
  
  ::test_data::Values* temp = v1_;
  v1_ = nullptr;
  return temp;
}
inline ::test_data::Values* WithList::_internal_mutable_v1() {
  
  if (v1_ == nullptr) {
    auto* p = CreateMaybeMessage<::test_data::Values>(GetArena());
    v1_ = p;
  }
  return v1_;
}
inline ::test_data::Values* WithList::mutable_v1() {
  // @@protoc_insertion_point(field_mutable:test_data.WithList.v1)
  return _internal_mutable_v1();
}
inline void WithList::set_allocated_v1(::test_data::Values* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete v1_;
  }
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    
  } else {
    
  }
  v1_ = v1;
  // @@protoc_insertion_point(field_set_allocated:test_data.WithList.v1)
}

// repeated .test_data.Values l2 = 2;
inline int WithList::_internal_l2_size() const {
  return l2_.size();
}
inline int WithList::l2_size() const {
  return _internal_l2_size();
}
inline void WithList::clear_l2() {
  l2_.Clear();
}
inline ::test_data::Values* WithList::mutable_l2(int index) {
  // @@protoc_insertion_point(field_mutable:test_data.WithList.l2)
  return l2_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_data::Values >*
WithList::mutable_l2() {
  // @@protoc_insertion_point(field_mutable_list:test_data.WithList.l2)
  return &l2_;
}
inline const ::test_data::Values& WithList::_internal_l2(int index) const {
  return l2_.Get(index);
}
inline const ::test_data::Values& WithList::l2(int index) const {
  // @@protoc_insertion_point(field_get:test_data.WithList.l2)
  return _internal_l2(index);
}
inline ::test_data::Values* WithList::_internal_add_l2() {
  return l2_.Add();
}
inline ::test_data::Values* WithList::add_l2() {
  // @@protoc_insertion_point(field_add:test_data.WithList.l2)
  return _internal_add_l2();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_data::Values >&
WithList::l2() const {
  // @@protoc_insertion_point(field_list:test_data.WithList.l2)
  return l2_;
}

// map<int32, .test_data.Values> m3 = 3;
inline int WithList::_internal_m3_size() const {
  return m3_.size();
}
inline int WithList::m3_size() const {
  return _internal_m3_size();
}
inline void WithList::clear_m3() {
  m3_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values >&
WithList::_internal_m3() const {
  return m3_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values >&
WithList::m3() const {
  // @@protoc_insertion_point(field_map:test_data.WithList.m3)
  return _internal_m3();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values >*
WithList::_internal_mutable_m3() {
  return m3_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::test_data::Values >*
WithList::mutable_m3() {
  // @@protoc_insertion_point(field_mutable_map:test_data.WithList.m3)
  return _internal_mutable_m3();
}

// string str4 = 4;
inline void WithList::clear_str4() {
  str4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WithList::str4() const {
  // @@protoc_insertion_point(field_get:test_data.WithList.str4)
  return _internal_str4();
}
inline void WithList::set_str4(const std::string& value) {
  _internal_set_str4(value);
  // @@protoc_insertion_point(field_set:test_data.WithList.str4)
}
inline std::string* WithList::mutable_str4() {
  // @@protoc_insertion_point(field_mutable:test_data.WithList.str4)
  return _internal_mutable_str4();
}
inline const std::string& WithList::_internal_str4() const {
  return str4_.Get();
}
inline void WithList::_internal_set_str4(const std::string& value) {
  
  str4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WithList::set_str4(std::string&& value) {
  
  str4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test_data.WithList.str4)
}
inline void WithList::set_str4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:test_data.WithList.str4)
}
inline void WithList::set_str4(const char* value,
    size_t size) {
  
  str4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test_data.WithList.str4)
}
inline std::string* WithList::_internal_mutable_str4() {
  
  return str4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WithList::release_str4() {
  // @@protoc_insertion_point(field_release:test_data.WithList.str4)
  return str4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithList::set_allocated_str4(std::string* str4) {
  if (str4 != nullptr) {
    
  } else {
    
  }
  str4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test_data.WithList.str4)
}
inline std::string* WithList::unsafe_arena_release_str4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test_data.WithList.str4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return str4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WithList::unsafe_arena_set_allocated_str4(
    std::string* str4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (str4 != nullptr) {
    
  } else {
    
  }
  str4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      str4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_data.WithList.str4)
}

// -------------------------------------------------------------------

// OneOfMessage

// .test_data.Values v1 = 1;
inline bool OneOfMessage::_internal_has_v1() const {
  return this != internal_default_instance() && v1_ != nullptr;
}
inline bool OneOfMessage::has_v1() const {
  return _internal_has_v1();
}
inline void OneOfMessage::clear_v1() {
  if (GetArena() == nullptr && v1_ != nullptr) {
    delete v1_;
  }
  v1_ = nullptr;
}
inline const ::test_data::Values& OneOfMessage::_internal_v1() const {
  const ::test_data::Values* p = v1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::test_data::Values*>(
      &::test_data::_Values_default_instance_);
}
inline const ::test_data::Values& OneOfMessage::v1() const {
  // @@protoc_insertion_point(field_get:test_data.OneOfMessage.v1)
  return _internal_v1();
}
inline void OneOfMessage::unsafe_arena_set_allocated_v1(
    ::test_data::Values* v1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(v1_);
  }
  v1_ = v1;
  if (v1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_data.OneOfMessage.v1)
}
inline ::test_data::Values* OneOfMessage::release_v1() {
  auto temp = unsafe_arena_release_v1();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::test_data::Values* OneOfMessage::unsafe_arena_release_v1() {
  // @@protoc_insertion_point(field_release:test_data.OneOfMessage.v1)
  
  ::test_data::Values* temp = v1_;
  v1_ = nullptr;
  return temp;
}
inline ::test_data::Values* OneOfMessage::_internal_mutable_v1() {
  
  if (v1_ == nullptr) {
    auto* p = CreateMaybeMessage<::test_data::Values>(GetArena());
    v1_ = p;
  }
  return v1_;
}
inline ::test_data::Values* OneOfMessage::mutable_v1() {
  // @@protoc_insertion_point(field_mutable:test_data.OneOfMessage.v1)
  return _internal_mutable_v1();
}
inline void OneOfMessage::set_allocated_v1(::test_data::Values* v1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete v1_;
  }
  if (v1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(v1);
    if (message_arena != submessage_arena) {
      v1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v1, submessage_arena);
    }
    
  } else {
    
  }
  v1_ = v1;
  // @@protoc_insertion_point(field_set_allocated:test_data.OneOfMessage.v1)
}

// .test_data.Values v2 = 2;
inline bool OneOfMessage::_internal_has_v2() const {
  return payload_case() == kV2;
}
inline bool OneOfMessage::has_v2() const {
  return _internal_has_v2();
}
inline void OneOfMessage::set_has_v2() {
  _oneof_case_[0] = kV2;
}
inline void OneOfMessage::clear_v2() {
  if (_internal_has_v2()) {
    if (GetArena() == nullptr) {
      delete payload_.v2_;
    }
    clear_has_payload();
  }
}
inline ::test_data::Values* OneOfMessage::release_v2() {
  // @@protoc_insertion_point(field_release:test_data.OneOfMessage.v2)
  if (_internal_has_v2()) {
    clear_has_payload();
      ::test_data::Values* temp = payload_.v2_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.v2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::test_data::Values& OneOfMessage::_internal_v2() const {
  return _internal_has_v2()
      ? *payload_.v2_
      : *reinterpret_cast< ::test_data::Values*>(&::test_data::_Values_default_instance_);
}
inline const ::test_data::Values& OneOfMessage::v2() const {
  // @@protoc_insertion_point(field_get:test_data.OneOfMessage.v2)
  return _internal_v2();
}
inline ::test_data::Values* OneOfMessage::unsafe_arena_release_v2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test_data.OneOfMessage.v2)
  if (_internal_has_v2()) {
    clear_has_payload();
    ::test_data::Values* temp = payload_.v2_;
    payload_.v2_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OneOfMessage::unsafe_arena_set_allocated_v2(::test_data::Values* v2) {
  clear_payload();
  if (v2) {
    set_has_v2();
    payload_.v2_ = v2;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_data.OneOfMessage.v2)
}
inline ::test_data::Values* OneOfMessage::_internal_mutable_v2() {
  if (!_internal_has_v2()) {
    clear_payload();
    set_has_v2();
    payload_.v2_ = CreateMaybeMessage< ::test_data::Values >(GetArena());
  }
  return payload_.v2_;
}
inline ::test_data::Values* OneOfMessage::mutable_v2() {
  // @@protoc_insertion_point(field_mutable:test_data.OneOfMessage.v2)
  return _internal_mutable_v2();
}

// .test_data.WithList v3 = 3;
inline bool OneOfMessage::_internal_has_v3() const {
  return payload_case() == kV3;
}
inline bool OneOfMessage::has_v3() const {
  return _internal_has_v3();
}
inline void OneOfMessage::set_has_v3() {
  _oneof_case_[0] = kV3;
}
inline void OneOfMessage::clear_v3() {
  if (_internal_has_v3()) {
    if (GetArena() == nullptr) {
      delete payload_.v3_;
    }
    clear_has_payload();
  }
}
inline ::test_data::WithList* OneOfMessage::release_v3() {
  // @@protoc_insertion_point(field_release:test_data.OneOfMessage.v3)
  if (_internal_has_v3()) {
    clear_has_payload();
      ::test_data::WithList* temp = payload_.v3_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.v3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::test_data::WithList& OneOfMessage::_internal_v3() const {
  return _internal_has_v3()
      ? *payload_.v3_
      : *reinterpret_cast< ::test_data::WithList*>(&::test_data::_WithList_default_instance_);
}
inline const ::test_data::WithList& OneOfMessage::v3() const {
  // @@protoc_insertion_point(field_get:test_data.OneOfMessage.v3)
  return _internal_v3();
}
inline ::test_data::WithList* OneOfMessage::unsafe_arena_release_v3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test_data.OneOfMessage.v3)
  if (_internal_has_v3()) {
    clear_has_payload();
    ::test_data::WithList* temp = payload_.v3_;
    payload_.v3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OneOfMessage::unsafe_arena_set_allocated_v3(::test_data::WithList* v3) {
  clear_payload();
  if (v3) {
    set_has_v3();
    payload_.v3_ = v3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_data.OneOfMessage.v3)
}
inline ::test_data::WithList* OneOfMessage::_internal_mutable_v3() {
  if (!_internal_has_v3()) {
    clear_payload();
    set_has_v3();
    payload_.v3_ = CreateMaybeMessage< ::test_data::WithList >(GetArena());
  }
  return payload_.v3_;
}
inline ::test_data::WithList* OneOfMessage::mutable_v3() {
  // @@protoc_insertion_point(field_mutable:test_data.OneOfMessage.v3)
  return _internal_mutable_v3();
}

inline bool OneOfMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void OneOfMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline OneOfMessage::PayloadCase OneOfMessage::payload_case() const {
  return OneOfMessage::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test_data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fdata_2eproto
